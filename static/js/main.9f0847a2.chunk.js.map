{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","className","alt","src","id","name","email","CardList","robots","displayCard","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","height","children","ErrorBoundary","state","hasError","this","React","Component","App","onSearchChange","event","setState","searchField","target","value","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,oCCOCQ,EAdF,SAACC,GAGV,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,GAAhC,cACpB,gCACI,6BAAKJ,EAAMK,OACX,4BAAIL,EAAMM,eCQXC,EAZE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAcD,EAAOE,KAAI,SAACC,EAAMC,GAClC,OAAO,cAAC,EAAD,CAAyBR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,OAAvEE,EAAOI,GAAGR,OAGhC,OACI,8BACKK,KCFEI,EATG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKb,UAAU,MAAf,SACI,uBAAOA,UAAU,kCAAkCc,KAAK,SACxDC,YAAY,eAAeC,SAAUH,OCKlCI,EATA,SAAClB,GACZ,OACI,qBAAKmB,MAAO,CAACC,SAAU,SAAUC,OAAQ,SAAzC,SAEKrB,EAAMsB,YCqBJC,G,wDApBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,UAAU,GAHJ,E,gEASVC,KAAKF,MAAM,CAACC,UAAU,M,+BAItB,OAAIC,KAAKF,MAAMC,SACJ,uDAEJC,KAAK1B,MAAMsB,a,GAjBEK,IAAMC,YCqDnBC,E,kDA/CX,aAAe,IAAD,8BACV,gBAeJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAfzC,EAAKX,MAAQ,CACThB,OAAQ,GACRyB,YAAa,IAJP,E,gEASO,IAAD,OAChBG,MAAM,8CACD3C,MAAK,SAAA4C,GAAQ,OAAIA,EAASC,UAC1B7C,MAAK,SAAA8C,GAAK,OAAI,EAAKP,SAAS,CAACxB,OAAQ+B,S,+BAQpC,IAAD,OACCC,EAAiBd,KAAKF,MAAMhB,OAAOiC,QAAO,SAAAC,GAC5C,OAAOA,EAAMrC,KAAKsC,cAAcC,SAAS,EAAKpB,MAAMS,YAAYU,kBAKpE,OAAiC,IAA7BjB,KAAKF,MAAMhB,OAAOqC,OACX,4CAGH,sBAAK5C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWa,aAAcY,KAAKI,iBAC9B,uBAEA,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUtB,OAAQgC,e,GAvC5Bb,IAAMC,WCFxBkB,IAASC,OACP,cAAC,IAAMC,WAAP,UAEI,cAAC,EAAD,MAGJC,SAASC,eAAe,SAM1B5D,M","file":"static/js/main.9f0847a2.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const Card = (props) => {\r\n    // const{id, name, email} = props;\r\n    \r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa2 ma2 grow'>\r\n            <img alt='robot' src={`https://robohash.org/${props.id}?200x200`} />\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import Card from './Card';\r\n\r\n// called 'pure functions' or 'dumb functions'\r\n// as they take input and return output, so same input means same output\r\nconst CardList = ({robots}) => {\r\n    const displayCard = robots.map((user, i) => {\r\n        return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n    })\r\n    \r\n    return (\r\n        <div>\r\n            {displayCard}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","const SearchBox = ( {searchChange} ) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lighest-blue' type='search' \r\n            placeholder='Search robot' onChange={searchChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","const Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', height: '440px'}}>\r\n            {/* every react component has props, state and children */}\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\n// to handle the error for user\r\n// user will see the error messege build to show not the detailed error\r\nclass ErrorBoundary extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    // a try-catch block for Javascript\r\n    componentDidCatch() {\r\n        this.state({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Something went wrong!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\n// in order to use State we need class\r\n// 'state' is props given by parent to child\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    // using JSONPlaceholder API to receive users as robots\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n            .then(response => response.json()) // converting received response to JSON\r\n            .then(users => this.setState({robots: users}));\r\n    }\r\n\r\n    // change of syntax so that 'this' always refers to where it is created\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value});\r\n    }\r\n    \r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        })\r\n        // console.log(\"render\");\r\n\r\n        // if API takes long time to return response\r\n        if (this.state.robots.length === 0) {\r\n            return <h1>LOADING...</h1>           \r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <hr />\r\n                    {/* making search bar fix with scroll */}\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    {\n      <App />\n    }\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}